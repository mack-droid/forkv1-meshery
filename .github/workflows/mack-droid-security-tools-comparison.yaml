name: Meshery Security Scans

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run workflow on'
        required: false
        default: 'main'
      components:
        description: 'Comma-separated components to scan (meshery,mesheryctl,ui,meshery-osm) or "all"'
        required: false
        default: 'all'

jobs:
  security-scans:
    name: Security Scan - ${{ matrix.component }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ github.event.inputs.components == 'all' && fromJSON('["meshery","mesheryctl","ui","meshery-osm"]') || split(github.event.inputs.components, ',') }}
        include:
          - component: meshery
            path: meshery-server
            dockerfile: Dockerfile
          - component: mesheryctl
            path: mesheryctl
            dockerfile: Dockerfile
          - component: ui
            path: ui
            dockerfile: Dockerfile
          - component: meshery-osm
            path: meshery-osm
            dockerfile: Dockerfile

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}
          path: src

      - name: Install Security Tools
        run: |
          # Install Syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b $HOME/.local/bin v0.105.0
          
          # Install Grype
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b $HOME/.local/bin v0.78.0
          
          # Install Trivy (global install)
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.50.1
          
          # Install gosec (SAST)
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $HOME/.local/bin v2.19.0
          
          # Install OpenVEX
          curl -LO https://github.com/openvex/openvex/releases/latest/download/openvex-linux-amd64
          chmod +x openvex-linux-amd64
          sudo mv openvex-linux-amd64 /usr/local/bin/openvex
          
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: SAST Scan (GoSec)
        if: ${{ contains(matrix.component, 'meshery') || contains(matrix.component, 'mesheryctl') }}
        run: |
          gosec -fmt=json -out=src/${{ matrix.path }}/gosec-report.json ./src/${{ matrix.path }}/...
        working-directory: src

      - name: Build Docker Image
        working-directory: src/${{ matrix.path }}
        run: |
          docker build -t ${{ matrix.component }}:latest -f ${{ matrix.dockerfile }} .

      - name: Container Scan (Trivy)
        run: |
          trivy image \
            --format table \
            --severity CRITICAL,HIGH \
            --exit-code 0 \
            ${{ matrix.component }}:latest

      - name: Generate SBOM
        run: |
          syft dir:src/${{ matrix.path }} -o cyclonedx-json > ${{ matrix.component }}-sbom.json

      - name: Vulnerability Scan (Grype)
        run: |
          grype sbom:${{ matrix.component }}-sbom.json -o cyclonedx-json > ${{ matrix.component }}-grype-report.json

      - name: Generate VEX Document
        run: |
          openvex generate \
            --sbom ${{ matrix.component }}-sbom.json \
            --output ${{ matrix.component }}-openvex.json \
            --author "Meshery Security Automation"

      - name: Archive Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ matrix.component }}
          path: |
            ${{ matrix.component }}-sbom.json
            ${{ matrix.component }}-grype-report.json
            ${{ matrix.component }}-openvex.json
            src/${{ matrix.path }}/gosec-report.json
