name: Meshery Security Scans

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        required: false
        default: 'main'
      components:
        description: 'Select components to scan (comma-separated or "all")'
        required: false
        default: 'all'

jobs:
  setup-tools:
    name: Setup Security Tools
    runs-on: ubuntu-latest
    outputs:
      syft-path: ${{ steps.syft-path.outputs.path }}
      trivy-path: ${{ steps.trivy-path.outputs.path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Syft
        id: syft-path
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b . v0.105.0
          echo "::set-output name=path::$(pwd)/syft"

      - name: Set up Trivy
        id: trivy-path
        uses: aquasecurity/trivy-action@master
        with:
          install-only: true

  scan-components:
    name: Scan Component - ${{ strategy.matrix.component }}
    runs-on: ubuntu-latest
    needs: setup-tools
    if: ${{ github.event.inputs.components == 'all' || contains(github.event.inputs.components, strategy.matrix.component) }}
    strategy:
      matrix:
        component: ["meshery", "mesheryctl", "meshery-ui", "provider"]
        include:
          - component: meshery
            path: ./server
          - component: mesheryctl
            path: ./mesheryctl
          - component: meshery-ui
            path: ./ui
          - component: provider
            path: ./provider-ui

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Build Docker image
        run: |
          cd ${{ matrix.path }}
          docker build -t ${{ matrix.component }}:latest .

      - name: Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.component }}:latest
          format: table
          exit-code: 0
          severity: CRITICAL,HIGH

      - name: Generate SBOM with Syft
        run: |
          cd ${{ matrix.path }}
          ../../syft . -o cyclonedx-json > ../../${{ matrix.component }}-sbom.json

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-sbom
          path: ${{ matrix.component }}-sbom.json

  vex-generation:
    name: Generate VEX for All Components
    runs-on: ubuntu-latest
    needs: scan-components
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Download SBOM Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./sboms

      - name: Install OpenVEX
        run: |
          curl -LO https://github.com/openvex/openvex/releases/latest/download/openvex-linux-amd64
          chmod +x openvex-linux-amd64
          mv openvex-linux-amd64 /usr/local/bin/openvex

      - name: Generate VEX from SBOMs
        run: |
          for sbom in ./sboms/**/*.json; do
            name=$(basename $sbom .json)
            openvex generate --sbom $sbom --output ${name}-vex.json
          done

      - name: Upload VEX Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vex-documents
          path: ./*-vex.json

  guac-ingestion:
    name: Ingest to GUAC
    runs-on: ubuntu-latest
    needs: vex-generation
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Download VEX Artifacts
        uses: actions/download-artifact@v4
        with:
          name: vex-documents
          path: ./vex

      - name: Download SBOM Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./sboms

      - name: Set up GUAC (local mode)
        run: |
          git clone https://github.com/guacsec/guac.git
          cd guac
          docker-compose -f examples/docker-compose.local.yaml up -d
          sleep 30

      - name: Ingest into GUAC
        run: |
          for sbom in ./sboms/**/*.json; do
            curl -X POST -H "Content-Type: application/json" --data @$sbom http://localhost:8080/ingest
          done
          for vex in ./vex/*.json; do
            curl -X POST -H "Content-Type: application/json" --data @$vex http://localhost:8080/ingest
          done
