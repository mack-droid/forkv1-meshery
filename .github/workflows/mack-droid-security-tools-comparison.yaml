name: Meshery Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to scan'
        required: false
        default: 'main'

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  sast-scan:
    name: SAST Scan (GoSec)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install GoSec
        run: |
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $HOME/.local/bin v2.19.0
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run SAST Scan
        continue-on-error: true
        run: |
          ulimit -v 4000000
          go build ./...
          gosec -fmt=json -out=sast-report.json -verbose ./...
        env:
          GOSEC_DIR: ./mesheryctl,./helpers,./models

      - name: Upload SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: sast-report.json

  container-scan:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Scan Container Image
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image-ref: 'layer5/meshery:stable-latest'
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0

      - name: Parse Critical Findings
        id: trivy-parser
        run: |
          critical_count=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-report.json)
          echo "critical_count=$critical_count" >> $GITHUB_OUTPUT

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  sbom-generation:
    name: SBOM Generation (Syft)
    runs-on: ubuntu-latest
    outputs:
      sbom-name: ${{ steps.sbom-gen.outputs.sbom-name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate SBOM
        id: sbom-gen
        uses: anchore/sbom-action@v0.15.1
        with:
          output-format: 'cyclonedx-json'
          output-file: 'meshery-sbom-${{ github.run_id }}.json'
        env:
          SYFT_CHECK_FOR_APP_UPDATE: 'false'

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: meshery-sbom-${{ github.run_id }}.json

  vulnerability-scan:
    name: Vulnerability Scan (Grype)
    runs-on: ubuntu-latest
    needs: [sbom-generation]
    steps:
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom

      - name: Install Grype
        uses: anchore/scan-action@v3
        with:
          scanner: 'grype'
          grype-version: 'v0.78.0'

      - name: Scan SBOM
        run: |
          grype sbom:$(ls meshery-sbom-*.json) -o json > grype-report.json
          critical_count=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' grype-report.json)
          echo "critical_count=$critical_count" >> $GITHUB_OUTPUT

      - name: Upload Grype Report
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

  vex-generation:
    name: VEX Generation (vexctl)
    runs-on: ubuntu-latest
    needs: [sbom-generation, vulnerability-scan]
    steps:
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom

      - name: Install vexctl
        uses: openvex/setup-vexctl@v1
        with:
          version: '0.3.0'

      - name: Generate VEX Document
        run: |
          vexctl generate --sbom $(ls meshery-sbom-*.json) \
          --output meshery-vex.json \
          --author "Meshery Security Bot"

      - name: Upload VEX Document
        uses: actions/upload-artifact@v4
        with:
          name: vex-document
          path: meshery-vex.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-scan, container-scan, vulnerability-scan, vex-generation]
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate Summary
        run: |
          echo "# Security Scan Summary ($(date +%Y-%m-%d))" > summary.md
          echo "## SAST Findings" >> summary.md
          jq '.Issues | length' security-reports/sast-report.json | xargs echo "- **GoSec Issues**: " >> summary.md
          
          echo "## Container Vulnerabilities" >> summary.md
          trivy_critical=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-reports/trivy-report.json)
          echo "- **CRITICAL**: $trivy_critical" >> summary.md
          
          echo "## SBOM Vulnerabilities" >> summary.md
          grype_critical=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' security-reports/grype-report.json)
          echo "- **CRITICAL**: $grype_critical" >> summary.md
          
          echo "## VEX Document" >> summary.md
          echo "- Statements: $(jq '.statements | length' security-reports/vex-document/meshery-vex.json)" >> summary.md
          
          echo "## Next Steps" >> summary.md
          echo "- [View Full Reports](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> summary.md
          echo "- [Triage Guidance](https://docs.meshery.io/security)" >> summary.md
          
          cat summary.md >> $GITHUB_STEP_SUMMARY

      - name: Create Security Issue
        if: ${{ needs.container-scan.outputs.critical_count != '0' || needs.vulnerability-scan.outputs.critical_count != '0' }}
        uses: actions/github-script@v7
        with:
          script: |
            const summary = fs.readFileSync('summary.md', 'utf8');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Critical Security Findings - ${new Date().toISOString()}`,
              body: summary,
              labels: ['security', 'critical']
            })
