name: Meshery Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to scan'
        required: false
        default: 'main'

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      - name: Generate CycloneDX SBOM
        uses: CycloneDX/gh-gomod-generate-sbom@v2
        with:
          version: v1
          args: mod -licenses -assert-licenses -json -output cyclonedx-sbom.json
      - name: Validate SBOM
        run: |
          if [ ! -f "cyclonedx-sbom.json" ] || [ ! -s "cyclonedx-sbom.json" ]; then
            echo "CycloneDX SBOM is missing or empty."
            exit 1
          fi
          if ! jq -e '.components' cyclonedx-sbom.json > /dev/null; then
            echo "CycloneDX SBOM does not have a valid 'components' field."
            exit 1
          fi
          echo "CycloneDX SBOM - Licenses: $(jq '[.components[].licenses[].license.id? // empty] | length' cyclonedx-sbom.json)"
      - name: Debug CycloneDX SBOM Licenses
        run: |
          jq '.components[].licenses' cyclonedx-sbom.json
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: cyclonedx-sbom.json

  repo-scan:
    name: Repository Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Scan Repository with Grype
        uses: anchore/scan-action@v6
        id: repo-scan
        with:
          path: "."
          output-format: json
          output-file: grype-repo-report.json
          severity-cutoff: high
          fail-build: false
          cache-db: false
      - name: Validate Grype Repo Report
        run: |
          if [ ! -f "grype-repo-report.json" ] || [ ! -s "grype-repo-report.json" ]; then
            echo "Grype repo report is missing or empty."
            exit 1
          fi
          if ! jq -e '.matches' grype-repo-report.json > /dev/null; then
            echo "Grype repo report does not have a valid 'matches' field."
            exit 1
          fi
      - name: Debug Grype Repo Scan
        run: |
          jq '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")' grype-repo-report.json
      - name: Upload Grype Repo Report
        uses: actions/upload-artifact@v4
        with:
          name: grype-repo-report
          path: grype-repo-report.json
      - name: Debug Grype Database
        if: failure()
        run: |
          grype db status -vv
          ls -la ~/.cache/grype/db

  sbom-scan:
    name: SBOM Scan
    runs-on: ubuntu-latest
    needs: sbom-generation
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: sbom
      - name: Scan SBOM with Grype
        uses: anchore/scan-action@v6
        id: sbom-scan
        with:
          sbom: sbom/cyclonedx-sbom.json
          output-format: json
          output-file: grype-sbom-report.json
          severity-cutoff: high
          fail-build: false
          cache-db: false
      - name: Validate Grype SBOM Report
        run: |
          if [ ! -f "grype-sbom-report.json" ] || [ ! -s "grype-sbom-report.json" ]; then
            echo "Grype SBOM report is missing or empty."
            exit 1
          fi
          if ! jq -e '.matches' grype-sbom-report.json > /dev/null; then
            echo "Grype SBOM report does not have a valid 'matches' field."
            exit 1
          fi
      - name: Debug Grype SBOM Scan
        run: |
          jq '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")' grype-sbom-report.json
      - name: Upload Grype SBOM Report
        uses: actions/upload-artifact@v4
        with:
          name: grype-sbom-report
          path: grype-sbom-report.json

  container-scan-trivy:
    name: Container Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'layer5/meshery:edge-latest'
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: false
      - name: Validate Trivy Report
        run: |
          if [ ! -f "trivy-report.json" ] || [ ! -s "trivy-report.json" ]; then
            echo "Trivy report is missing or empty."
            exit 1
          fi
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  container-scan-grype:
    name: Container Scan (Grype)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Scan Container Image with Grype
        uses: anchore/scan-action@v6
        id: image-scan
        with:
          image: 'layer5/meshery:edge-latest'
          output-format: json
          output-file: grype-image-report.json
          severity-cutoff: high
          fail-build: false
          cache-db: false
      - name: Validate Grype Image Report
        run: |
          if [ ! -f "grype-image-report.json" ] || [ ! -s "grype-image-report.json" ]; then
            echo "Grype image report is missing or empty."
            exit 1
          fi
          if ! jq -e '.matches' grype-image-report.json > /dev/null; then
            echo "Grype image report does not have a valid 'matches' field."
            exit 1
          fi
      - name: Debug Grype Image Scan
        run: |
          jq '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")' grype-image-report.json
      - name: Upload Grype Image Report
        uses: actions/upload-artifact@v4
        with:
          name: grype-image-report
          path: grype-image-report.json
      - name: Debug Grype Database
        if: failure()
        run: |
          grype db status -vv
          ls -la ~/.cache/grype/db

  vex-generation:
    name: VEX Generation
    runs-on: ubuntu-latest
    needs: [sbom-generation, repo-scan, sbom-scan, container-scan-trivy, container-scan-grype]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype --version
      - name: Install vexctl
        run: |
          curl -sSfL https://github.com/openvex/vexctl/releases/latest/download/vexctl-linux-amd64 -o /usr/local/bin/vexctl
          chmod +x /usr/local/bin/vexctl
          vexctl version
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Generate VEX Document (Grype)
        run: |
          # Extract high/critical CVEs from reports
          trivy_cves=$(jq -r '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | .VulnerabilityID' artifacts/trivy-report/trivy-report.json)
          grype_image_cves=$(jq -r '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High") | .vulnerability.id' artifacts/grype-image-report/grype-image-report.json)
          grype_sbom_cves=$(jq -r '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High") | .vulnerability.id' artifacts/grype-sbom-report/grype-sbom-report.json)
          grype_repo_cves=$(jq -r '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High") | .vulnerability.id' artifacts/grype-repo-report/grype-repo-report.json)
          
          # Combine and remove duplicates
          all_cves=$(echo "$trivy_cves $grype_image_cves $grype_sbom_cves $grype_repo_cves" | tr ' ' '\n' | sort | uniq)
          
          # Generate VEX document with vexctl or create empty document if no CVEs
          if [ -z "$all_cves" ]; then
            echo "No high/critical vulnerabilities found. Creating empty VEX document."
            echo '{"@context":"https://openvex.dev/ns/v1","statements":[]}' > grype-vex.json
          else
            echo "$all_cves" | vexctl create \
              --product "pkg:github/mack-droid/forkv1-meshery" \
              --status under_investigation \
              --output grype-vex.json
          fi
          
          # Debug: Display the VEX document
          cat grype-vex.json
          
          # Apply VEX with Grype
          grype sbom:artifacts/sbom/cyclonedx-sbom.json --vex grype-vex.json -o json > grype-vex-report.json
          
      - name: Generate VEX Document (vexctl)
        run: |
          # Generate VEX using vexctl from Grype and Trivy reports
          vexctl create \
            --product "pkg:github/mack-droid/forkv1-meshery" \
            --input <(jq -r '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High") | .vulnerability.id' artifacts/grype-image-report/grype-image-report.json) \
            --status under_investigation \
            --output vexctl-vex.json
          vexctl create \
            --product "pkg:github/mack-droid/forkv1-meshery" \
            --input <(jq -r '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | .VulnerabilityID' artifacts/trivy-report/trivy-report.json) \
            --status under_investigation \
            --merge vexctl-vex.json \
            --output vexctl-vex.json
          vexctl create \
            --product "pkg:github/mack-droid/forkv1-meshery" \
            --input <(jq -r '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High") | .vulnerability.id' artifacts/grype-sbom-report/grype-sbom-report.json) \
            --status under_investigation \
            --merge vexctl-vex.json \
            --output vexctl-vex.json
          vexctl create \
            --product "pkg:github/mack-droid/forkv1-meshery" \
            --input <(jq -r '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High") | .vulnerability.id' artifacts/grype-repo-report/grype-repo-report.json) \
            --status under_investigation \
            --merge vexctl-vex.json \
            --output vexctl-vex.json
      - name: Validate VEX Reports
        run: |
          for vex in grype-vex.json vexctl-vex.json; do
            if [ ! -f "$vex" ] || [ ! -s "$vex" ]; then
              echo "VEX file $vex is missing or empty."
              exit 1
            fi
            if ! jq -e '.statements' "$vex" > /dev/null; then
              echo "VEX file $vex does not have a valid 'statements' field."
              exit 1
            fi
          done
          if [ ! -f "grype-vex-report.json" ] || [ ! -s "grype-vex-report.json" ]; then
            echo "Grype VEX report is missing or empty."
            exit 1
          fi
          if ! jq -e '.matches' grype-vex-report.json > /dev/null; then
            echo "Grype VEX report does not have a valid 'matches' field."
            exit 1
          fi
      - name: Upload VEX Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vex-artifacts
          path: |
            grype-vex.json
            vexctl-vex.json
            grype-vex-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sbom-generation, repo-scan, sbom-scan, container-scan-trivy, container-scan-grype, vex-generation]
    steps:
      - name: Download Reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports
      - name: Generate Summary
        run: |
          # Validate all input files
          files=(
            security-reports/sbom/cyclonedx-sbom.json
            security-reports/trivy-report/trivy-report.json
            security-reports/grype-repo-report/grype-repo-report.json
            security-reports/grype-sbom-report/grype-sbom-report.json
            security-reports/grype-image-report/grype-image-report.json
            security-reports/vex-artifacts/grype-vex.json
            security-reports/vex-artifacts/vexctl-vex.json
            security-reports/vex-artifacts/grype-vex-report.json
          )
          for file in "${files[@]}"; do
            if [ ! -f "$file" ] || [ ! -s "$file" ]; then
              echo "File $file is missing or empty." >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          done
          if ! jq -e '.components' security-reports/sbom/cyclonedx-sbom.json > /dev/null; then
            echo "CycloneDX SBOM does not have a valid 'components' field." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          if ! jq -e '.matches' security-reports/vex-artifacts/grype-vex-report.json > /dev/null; then
            echo "Grype VEX report does not have a valid 'matches' field." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "## SBOM Details" >> $GITHUB_STEP_SUMMARY
          echo "- Components: $(jq '.components | length' security-reports/sbom/cyclonedx-sbom.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: $(jq '.dependencies | length' security-reports/sbom/cyclonedx-sbom.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Licenses: $(jq '[.components[].licenses[].license.id? // empty] | length' security-reports/sbom/cyclonedx-sbom.json)" >> $GITHUB_STEP_SUMMARY
          
          echo "## Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Source | Scan Type | CRITICAL | HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-----------|----------|------|" >> $GITHUB_STEP_SUMMARY
          trivy_crit=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-reports/trivy-report/trivy-report.json)
          trivy_high=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length' security-reports/trivy-report/trivy-report.json)
          grype_repo_crit=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' security-reports/grype-repo-report/grype-repo-report.json)
          grype_repo_high=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' security-reports/grype-repo-report/grype-repo-report.json)
          grype_sbom_crit=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' security-reports/grype-sbom-report/grype-sbom-report.json)
          grype_sbom_high=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' security-reports/grype-sbom-report/grype-sbom-report.json)
          grype_image_crit=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' security-reports/grype-image-report/grype-image-report.json)
          grype_image_high=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' security-reports/grype-image-report/grype-image-report.json)
          grype_vex_crit=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' security-reports/vex-artifacts/grype-vex-report.json)
          grype_vex_high=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' security-reports/vex-artifacts/grype-vex-report.json)
          echo "| Trivy | Image | $trivy_crit | $trivy_high |" >> $GITHUB_STEP_SUMMARY
          echo "| Grype | Repository | $grype_repo_crit | $grype_repo_high |" >> $GITHUB_STEP_SUMMARY
          echo "| Grype | CycloneDX SBOM | $grype_sbom_crit | $grype_sbom_high |" >> $GITHUB_STEP_SUMMARY
          echo "| Grype | Image | $grype_image_crit | $grype_image_high |" >> $GITHUB_STEP_SUMMARY
          echo "| Grype | SBOM (VEX) | $grype_vex_crit | $grype_vex_high |" >> $GITHUB_STEP_SUMMARY
          
          echo "## VEX Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Source | Statements |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------------|" >> $GITHUB_STEP_SUMMARY
          grype_vex_statements=$(jq '.statements | length' security-reports/vex-artifacts/grype-vex.json)
          vexctl_vex=$(jq '.statements | length' security-reports/vex-artifacts/vexctl-vex.json)
          echo "| Grype VEX | $grype_vex_statements |" >> $GITHUB_STEP_SUMMARY
          echo "| vexctl | $vexctl_vex_statements |" >> $GITHUB_STEP_SUMMARY
          
          echo "## Dependency Comparison" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Source | Direct Dependencies | Transitive Dependencies |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|---------------------|------------------------|" >> $GITHUB_STEP_SUMMARY
          direct=$(jq '[.components[] | select(.type == "library")] | .length' security-reports/sbom/cyclonedx-sbom.json)
          transitive=$(jq '[.components[] | select(.type == "library') | .dependencies?[]] | unique | length // 0' security-reports/sbom/cyclonedx-sbom.json)
          echo "| CycloneDX (Go) | $direct | $transitive |" >> $GITHUB_STEP_SUMMARY
          
          echo "## License Distribution" >> $GITHUB_STEP_SUMMARY
          echo "| License | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
          jq -r '.components[].licenses[].license.id? // empty' security-reports/sbom/cyclonedx-sbom.json | 
            sort | uniq -c | sort -nr | 
            awk '{if ($2 != "") print "| " $2 " | " $1 " |"}' >> $GITHUB_STEP_SUMMARY
      # - name: Create GitHub Issue
      #   if: ${{ steps.generate_summary.outputs.vuln_count != '0' }}
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     vuln_count=$((trivy_crit + trivy_high + grype_repo_crit + grype_repo_high + grype_sbom_crit + grype_sbom_high + grype_image_crit + grype_image_high + grype_vex_crit + grype_vex_high))
      #     echo "Found $vuln_count critical/high vulnerabilities" > issue_body.txt
      #     echo "## Trivy (Image)" >> issue_body.txt
      #     echo '```json' >> issue_body.txt
      #     jq '[.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH")][0:5]' security-reports/trivy-report/trivy-report.json >> issue_body.txt
      #     echo '```' >> issue_body.txt
      #     echo "## Grype (Repository)" >> issue_body.txt
      #     echo '```json' >> issue_body.txt
      #     jq '[.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")][0:5]' security-reports/grype-repo-report/grype-repo-report.json >> issue_body.txt
      #     echo '```' >> issue_body.txt
      #     echo "## Grype (CycloneDX SBOM)" >> issue_body.txt
      #     echo '```json' >> issue_body.txt
      #     jq '[.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")][0:5]' security-reports/grype-sbom-report/grype-sbom-report.json >> issue_body.txt
      #     echo '```' >> issue_body.txt
      #     echo "## Grype (Image)" >> issue_body.txt
      #     echo '```json' >> issue_body.txt
      #     jq '[.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")][0:5]' security-reports/grype-image-report/grype-image-report.json >> issue_body.txt
      #     echo '```' >> issue_body.txt
      #     echo "## Grype (SBOM with VEX)" >> issue_body.txt
      #     echo '```json' >> issue_body.txt
      #     jq '[.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High")][0:5]' security-reports/vex-artifacts/grype-vex-report.json >> issue_body.txt
      #     echo '```' >> issue_body.txt
      #     gh issue create \
      #       --title "Security Scan: $vuln_count CRITICAL/HIGH Vulnerabilities Found - $(date +'%Y-%m-%d %H:%M:%S')" \
      #       --body-file issue_body.txt
      #   id: generate_summary
