name: Meshery Security Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to scan'
        required: false
        default: 'main'

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  sbom-generation:
    name: SBOM Generation (CycloneDX)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      - name: Generate CycloneDX SBOM
        uses: CycloneDX/gh-gomod-generate-sbom@v2
        with:
          version: v1
          args: mod -licenses -json -output bom.json
      - name: Validate SBOM
        run: |
          jq . bom.json
          echo "Components: $(jq '.components | length' bom.json)"
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: bom.json

  container-scan:
    name: Container Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image-ref: 'layer5/meshery:stable-latest'
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: false
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  vulnerability-scan:
    name: Vulnerability Scan (Image)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype --version
      - name: Scan Container Image with Grype
        run: |
          grype layer5/meshery:stable-latest -o json > grype-report.json
        env:
          GRYPE_DB_UPDATE_URL: https://toolbox-data.anchore.io/grype/databases/listing.json
      - name: Validate Grype Report
        run: |
          if [ ! -f "grype-report.json" ] || [ ! -s "grype-report.json" ]; then
            echo "Grype report is missing or empty."
            exit 1
          fi
          if ! jq -e '.matches' grype-report.json > /dev/null; then
            echo "Grype report does not have a valid 'matches' field."
            exit 1
          fi
      - name: Upload Grype Report
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json

  vex-generation:
    name: VEX Generation
    runs-on: ubuntu-latest
    needs: [sbom-generation, container-scan, vulnerability-scan]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: artifacts/sbom
      - name: Download Trivy Report
        uses: actions/download-artifact@v4
        with:
          name: trivy-report
          path: artifacts/reports/trivy-report
      - name: Download Grype Report
        uses: actions/download-artifact@v4
        with:
          name: grype-report
          path: artifacts/reports/grype-report
      - name: Generate VEX Document
        run: |
          # Extract CVEs from Trivy report
          trivy_cves=$(jq -r '.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | .VulnerabilityID' artifacts/reports/trivy-report/trivy-report.json)
          
          # Extract CVEs from Grype report
          grype_cves=$(jq -r '.matches[] | select(.vulnerability.severity == "Critical" or .vulnerability.severity == "High") | .vulnerability.id' artifacts/reports/grype-report/grype-report.json)
          
          # Combine and remove duplicates
          all_cves=$(echo "$trivy_cves $grype_cves" | tr ' ' '\n' | sort | uniq)
          
          # Generate VEX document
          vex_json='{
            "@context": "https://openvex.dev/ns/v1",
            "@id": "https://example.com/vex-'$(date +%s)'",
            "author": "Automated Workflow",
            "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "version": 1,
            "statements": []
          }'
          
          for cve in $all_cves; do
            statement='{
              "vulnerability": {
                "@id": "https://nvd.nist.gov/vuln/detail/'$cve'"
              },
              "products": [
                {
                  "@id": "pkg:github/mack-droid/forkv1-meshery"
                }
              ],
              "status": "under_investigation"
            }'
            vex_json=$(echo $vex_json | jq '.statements += ['"$statement"']')
          done
          
          echo $vex_json > meshery.vex.json
      - name: Upload VEX Document
        uses: actions/upload-artifact@v4
        with:
          name: vex-document
          path: meshery.vex.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sbom-generation, container-scan, vulnerability-scan, vex-generation]
    steps:
      - name: Download Reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports
      - name: Generate Summary
        run: |
          # Check if files exist and are valid
          if [ ! -f "security-reports/sbom/bom.json" ] || [ ! -s "security-reports/sbom/bom.json" ]; then
            echo "SBOM file is missing or empty." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          if [ ! -f "security-reports/trivy-report/trivy-report.json" ] || [ ! -s "security-reports/trivy-report/trivy-report.json" ]; then
            echo "Trivy report is missing or empty." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          if [ ! -f "security-reports/grype-report/grype-report.json" ] || [ ! -s "security-reports/grype-report/grype-report.json" ]; then
            echo "Grype report is missing or empty." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          if [ ! -f "security-reports/vex-document/meshery.vex.json" ] || [ ! -s "security-reports/vex-document/meshery.vex.json" ]; then
            echo "VEX document is missing or empty." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "## SBOM Details" >> $GITHUB_STEP_SUMMARY
          echo "- Components: $(jq '.components | length' security-reports/sbom/bom.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: $(jq '.dependencies | length' security-reports/sbom/bom.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Licenses: $(jq '.components[].licenses | length' security-reports/sbom/bom.json | awk '{s+=$1} END {print s}')" >> $GITHUB_STEP_SUMMARY
          
          echo "## Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Scanner | CRITICAL | HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|----------|------|" >> $GITHUB_STEP_SUMMARY
          trivy_crit=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-reports/trivy-report/trivy-report.json)
          trivy_high=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "HIGH")] | length' security-reports/trivy-report/trivy-report.json)
          grype_crit=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' security-reports/grype-report/grype-report.json)
          grype_high=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' security-reports/grype-report/grype-report.json)
          echo "| Trivy | $trivy_crit | $trivy_high |" >> $GITHUB_STEP_SUMMARY
          echo "| Grype | $grype_crit | $grype_high |" >> $GITHUB_STEP_SUMMARY
          
          echo "## VEX Document" >> $GITHUB_STEP_SUMMARY
          echo "- Statements: $(jq '.statements | length' security-reports/vex-document/meshery.vex.json)" >> $GITHUB_STEP_SUMMARY
      - name: Generate Comparison Report
        run: |
          # Check if SBOM file exists and is not empty
          if [ ! -f "security-reports/sbom/bom.json" ] || [ ! -s "security-reports/sbom/bom.json" ]; then
            echo "SBOM file is missing or empty." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Validate SBOM structure (has components field)
          if ! jq -e '.components' security-reports/sbom/bom.json > /dev/null; then
            echo "SBOM does not have a 'components' field." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "## Dependency Comparison" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Direct Dependencies | Transitive Dependencies |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------------------|------------------------|" >> $GITHUB_STEP_SUMMARY
          
          # Calculate direct and transitive dependencies safely
          direct=$(jq '[.components[] | select(.type == "library")] | length' security-reports/sbom/bom.json)
          transitive=$(jq '[.components[] | select(.type == "library") | .dependencies?[]] | unique | length // 0' security-reports/sbom/bom.json)
          echo "| CycloneDX (Go) | $direct | $transitive |" >> $GITHUB_STEP_SUMMARY
          
          echo "## License Distribution" >> $GITHUB_STEP_SUMMARY
          echo "| License | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
          jq -r '.components[].licenses[].license.id? // empty' security-reports/sbom/bom.json | 
            sort | uniq -c | sort -nr | 
            awk '{if ($2 != "") print "| " $2 " | " $1 " |"}' >> $GITHUB_STEP_SUMMARY
